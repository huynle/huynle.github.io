<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ESP MCU on Huy Le</title><link>https://www.huynle.com/projects/esp/</link><description>Recent content in ESP MCU on Huy Le</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sat, 14 Apr 2018 09:41:57 -0600</lastBuildDate><atom:link href="https://www.huynle.com/projects/esp/index.xml" rel="self" type="application/rss+xml"/><item><title>ESP32</title><link>https://www.huynle.com/projects/esp32/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.huynle.com/projects/esp32/</guid><description>Frameworks There are open community versions of ESP8266, and the ones from ExpressIf
ESP31_RTOS_SDK esp-idf:: ESP development framework Setting Up</description></item><item><title>ESP8266</title><link>https://www.huynle.com/projects/esp8266/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.huynle.com/projects/esp8266/</guid><description>Frameworks There are open community versions of ESP8266, and the ones from ExpressIf
ESP Open Source
esp-open-sdk esp-open-rtos Using FreeRTOS in the back ESP Close source
ESP8266_RTOS_SDK ESP8266_NONOS_SDK Background Methods Bare Metal with Open SDK RTOS with FreeRTOS user_init():: is in the rtos&amp;ndash;&amp;gt;core. This is the entry to the system. Part of the user_start_phase2 which takes the user_init_task and then starts the scheduler.</description></item></channel></rss>