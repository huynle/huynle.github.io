<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Huy Le</title><link>https://www.huynle.com/tags/git/</link><description>Recent content in Git on Huy Le</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Fri, 30 Sep 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://www.huynle.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Workflow</title><link>https://www.huynle.com/learnings/git-workflow/</link><pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.huynle.com/learnings/git-workflow/</guid><description>Merging vs. Rebasing The two essentially do the same thing. the difference is that rebase makes the history linear. This is good when you are developing on your own branches, but not good when we you working on public branch, more here
To merge or rebase master into a feature
git checkout feature git merge master # or.. a oneliner git merge master feature # say it in your head, git merge master into feature Rewriting history keeping a clean history is important This code snippets will allow you to interactively update commits for a particular branch.</description></item></channel></rss>